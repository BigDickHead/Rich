# Remove old vims
sudo apt-get remove vim vim-runtime gvim
sudo apt-get remove vim-tiny vim-common vim-gui-common

# Download and build a new vim
sudo apt-get install libncurses5-dev libgnome2-dev libgnomeui-dev \
libgtk2.0-dev libatk1.0-dev libbonoboui2-dev \
libcairo2-dev libx11-dev libxpm-dev libxt-dev \
python-dev ruby-dev libperl-dev mercurial \
((libluajit-5.1-2 libluajit-5.1-common libluajit-5.1-dev luajit) || (lua5.2 liblua5.2-dev))


# luajit have a better performance

# If compile vim with python3 feature
sudo apt-get install python3.2 python3.2-dev
# Note: When Python 2 and Python 3 are both supported they must be loaded dynamically. like +python/dyn +python3/dyn
# Replaced --enable-pythoninterp... with --enable-python3interp=yes --with-python3-config-dir=/usr/lib/python3.2/config/


hg clone https://vim.googlecode.com/hg/ vim

./configure \
--prefix=/usr \
--with-features=huge \
--with-compiledby="Richard" \
--enable-cscope \
--enable-fontset \
--enable-multibyte \
--enable-rubyinterp=yes \
--enable-luainterp=yes \
--with-lua-prefix=/usr --with-luajit \
--enable-python3interp=yes \
--with-python3-config-dir=/usr/lib/python3.2/config \
--enable-gpm \
--enable-gui=gtk2 \
--enable-fail-if-missing
##--enable-perlinterp=yes \
##--enable-tclinterp=yes \


make VIMRUNTIMEDIR=/usr/share/vim/vim74
sudo make install


# If the process of configuration cannot find out the lua.h
ln -s /usr/include/lua5.2/ /usr/local/include/


# If you don't get gvim working
try changing --enable-gui=gtk2 to --enable-gui=gnome2


# Set vim as your default editor with update-alternatives.
sudo update-alternatives --install /usr/bin/editor editor /usr/bin/vim 1
sudo update-alternatives --set editor /usr/bin/vim
sudo update-alternatives --install /usr/bin/vi vi /usr/bin/vim 1
sudo update-alternatives --set vi /usr/bin/vim

------------------------------------------------------------------------------------------------------

gvim最大化
apt-get install wmctrl

" Fullscreen mode for GVIM and Terminal, need 'wmctrl' in you PATH
if executable('wmctrl')
    map <silent> <F11> :call system("wmctrl -ir " . v:windowid . " -b toggle,fullscreen")<CR>
    map <silent> <C-F11> :call system("wmctrl -ir " . v:windowid . " -b toggle,maximized_vert,maximized_horz")<CR>
endif
------------------------------------------------------------------------------------------------------

当 前目录有main.c，其中调用了cstest.c中的print()，此函数在cstest.h中进行了声明。
使用下面的命令生成代码 的符号索引文件：
$ cscope -Rbkq
这个命令会生成三个文件：cscope.out, cscope.in.out, cscope.po.out。

其中cscope.out是基本的符号索引，后两个文件是使用"-q"选项生成的，可以加快cscope的索引速度。上面命令的参数含义如下：
-R: 在生成索引文件时，搜索子目录树中的代码
-b: 只生成索引文件，不进入cscope的界面
-k: 在生成索引文件时，不搜索/usr/include目录
-q: 生成cscope.in.out和cscope.po.out文件，加快cscope的索引速度
-i: 如果保存文件列表的文件名不是cscope.files时，需要加此选项告诉cscope到哪儿去找源文件列表。可以使用"-"，表示由标准输入获得文件列表。
-I dir: 在-I选项指出的目录中查找头文件
-u: 扫描所有文件，重新生成交叉索引文件
-C: 在搜索时忽略大小写
-P path: 在以相对路径表示的文件前加上的path，这样，你不用切换到你数据库文件所在的目录也可以使用它了。


在 缺省情况下，cscope在生成数据库后就会进入它自己的查询界面，一般不用这个界面，所以使用了"-b"选 项。如果已经进入了这个界面，按CTRL-D退出。

vim:set nospell:

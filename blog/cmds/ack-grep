ACK-GREP(1p)                                 User Contributed Perl Documentation                                 ACK-GREP(1p)



NAME
       ack-grep - grep-like text finder

SYNOPSIS
           ack-grep [options] PATTERN [FILE...]
           ack-grep -f [options] [DIRECTORY...]

DESCRIPTION
       Ack-Grep is designed as a replacement for 99% of the uses of grep.

       Ack-Grep searches the named input FILEs (or standard input, if it is a pipe instead of a terminal) for lines
       containing a match to the given PATTERN. If no files are named, the current directory is searched. By default, ack-
       grep prints the matching lines.

       Ack-Grep can also list files that would be searched, without actually searching them, to let you take advantage of
       ack-grep's file-type filtering capabilities.

FILE SELECTION
       ack-grep is intelligent about the files it searches.  It knows about certain file types, based on both the extension
       on the file and, in some cases, the contents of the file.  These selections can be made with the --type option.

       With no file selections, ack-grep only searches files of types that it recognizes.  If you have a file called
       foo.wango, and ack-grep doesn't know what a .wango file is, ack-grep won't search it.

       The -a option tells ack-grep to select all files, regardless of type.

       Some files will never be selected by ack-grep, even with -a, including:

       ·   Backup files: Files matching #*# or ending with ~.

       ·   Coredumps: Files matching core.\d+

       However, ack-grep always searches the files given on the command line, no matter what type. Furthermore, by specifying
       the -u option all files will be searched.

DIRECTORY SELECTION
       ack-grep descends through the directory tree of the starting directories specified.  However, it will ignore the
       shadow directories used by many version control systems, and the build directories used by the Perl MakeMaker system.
       You may add or remove a directory from this list with the --[no]ignore-dir option. The option may be repeated to
       add/remove multiple directories from the ignore list.

       For a complete list of directories that do not get searched, run ack-grep --help.

WHEN TO USE GREP
       ack-grep trumps grep as an everyday tool 99% of the time, but don't throw grep away, because there are times you'll
       still need it.

       E.g., searching through huge files looking for regexes that can be expressed with grep syntax should be quicker with
       grep.

       If your script or parent program uses grep "--quiet" or "--silent" or needs exit 2 on IO error, use grep.

OPTIONS
       -a, --all
           Operate on all files, regardless of type (but still skip directories like blib, CVS, etc.)

       -A NUM, --after-context=NUM
           Print NUM lines of trailing context after matching lines.

       -B NUM, --before-context=NUM
           Print NUM lines of leading context before matching lines.

       -C [NUM], --context[=NUM]
           Print NUM lines (default 2) of context around matching lines.

       -c, --count
           Suppress normal output; instead print a count of matching lines for each input file.  If -l is in effect, it will
           only show the number of lines for each file that has lines matching.  Without -l, some line counts may be zeroes.

           If combined with -h (--no-filename) ack-grep outputs only one total count.

       --color, --nocolor
           --color highlights the matching text.  --nocolor supresses the color.  This is on by default unless the output is
           redirected.

           On Windows, this option is off by default unless the Win32::Console::ANSI module is installed or the
           "ACK_PAGER_COLOR" environment variable is used.

       --color-filename=color
           Sets the color to be used for filenames.

       --color-match=color
           Sets the color to be used for matches.

       --color-lineno=color
           Sets the color to be used for line numbers.

       --column
           Show the column number of the first match.  This is helpful for editors that can place your cursor at a given
           position.

       --env, --noenv
           --noenv disables all environment processing. No .ackrc is read and all environment variables are ignored. By
           default, ack-grep considers .ackrc and settings in the environment.

       --flush
           --flush flushes output immediately.  This is off by default unless ack-grep is running interactively (when output
           goes to a pipe or file).

       -f  Only print the files that would be searched, without actually doing any searching.  PATTERN must not be specified,
           or it will be taken as a path to search.

       --follow, --nofollow
           Follow or don't follow symlinks, other than whatever starting files or directories were specified on the command
           line.

           This is off by default.

       -G REGEX
           Only paths matching REGEX are included in the search.  The entire path and filename are matched against REGEX, and
           REGEX is a Perl regular expression, not a shell glob.

           The options -i, -w, -v, and -Q do not apply to this REGEX.

       -g REGEX
           Print files where the relative path + filename matches REGEX. This option is a convenience shortcut for -f -G
           REGEX.

           The options -i, -w, -v, and -Q do not apply to this REGEX.

       --group, --nogroup
           --group groups matches by file name with.  This is the default when used interactively.

           --nogroup prints one result per line, like grep.  This is the default when output is redirected.

       -H, --with-filename
           Print the filename for each match.

       -h, --no-filename
           Suppress the prefixing of filenames on output when multiple files are searched.

       --help
           Print a short help statement.

       -i, --ignore-case
           Ignore case in the search strings.

           This applies only to the PATTERN, not to the regexes given for the -g and -G options.

       --[no]ignore-dir=DIRNAME
           Ignore directory (as CVS, .svn, etc are ignored). May be used multiple times to ignore multiple directories. For
           example, mason users may wish to include --ignore-dir=data. The --noignore-dir option allows users to search
           directories which would normally be ignored (perhaps to research the contents of .svn/props directories).

           The DIRNAME must always be a simple directory name. Nested directories like foo/bar are NOT supported. You would
           need to specify --ignore-dir=foo and then no files from any foo directory are taken into account by ack-grep
           unless given explicitly on the command line.

       --line=NUM
           Only print line NUM of each file. Multiple lines can be given with multiple --line options or as a comma separated
           list (--line=3,5,7). --line=4-7 also works. The lines are always output in ascending order, no matter the order
           given on the command line.

       -l, --files-with-matches
           Only print the filenames of matching files, instead of the matching text.

       -L, --files-without-matches
           Only print the filenames of files that do NOT match. This is equivalent to specifying -l and -v.

       --match REGEX
           Specify the REGEX explicitly. This is helpful if you don't want to put the regex as your first argument, e.g. when
           executing multiple searches over the same set of files.

               # search for foo and bar in given files
               ack-grep file1 t/file* --match foo
               ack-grep file1 t/file* --match bar

       -m=NUM, --max-count=NUM
           Stop reading a file after NUM matches.

       --man
           Print this manual page.

       -n, --no-recurse
           No descending into subdirectories.

       -o  Show only the part of each line matching PATTERN (turns off text highlighting)

       --output=expr
           Output the evaluation of expr for each line (turns off text highlighting)

       --pager=program
           Direct ack-grep's output through program.  This can also be specified via the "ACK_PAGER" and "ACK_PAGER_COLOR"
           environment variables.

           Using --pager does not suppress grouping and coloring like piping output on the command-line does.

       --passthru
           Prints all lines, whether or not they match the expression.  Highlighting will still work, though, so it can be
           used to highlight matches while still seeing the entire file, as in:

               # Watch a log file, and highlight a certain IP address
               $ tail -f ~/access.log | ack-grep --passthru 123.45.67.89

       --print0
           Only works in conjunction with -f, -g, -l or -c (filename output). The filenames are output separated with a null
           byte instead of the usual newline. This is helpful when dealing with filenames that contain whitespace, e.g.

               # remove all files of type html
               ack-grep -f --html --print0 | xargs -0 rm -f

       -Q, --literal
           Quote all metacharacters in PATTERN, it is treated as a literal.

           This applies only to the PATTERN, not to the regexes given for the -g and -G options.

       -r, -R, --recurse
           Recurse into sub-directories. This is the default and just here for compatibility with grep. You can also use it
           for turning --no-recurse off.

       --smart-case, --no-smart-case
           Ignore case in the search strings if PATTERN contains no uppercase characters. This is similar to "smartcase" in
           vim. This option is off by default.

           -i always overrides this option.

           This applies only to the PATTERN, not to the regexes given for the -g and -G options.

       --sort-files
           Sorts the found files lexically.  Use this if you want your file listings to be deterministic between runs of ack-
           grep.

       --show-types
           Outputs the filetypes that ack-grep associates with each file.

           Works with -f and -g options.

       --thpppt
           Display the all-important Bill The Cat logo.  Note that the exact spelling of --thpppppt is not important.  It's
           checked against a regular expression.

       --type=TYPE, --type=noTYPE
           Specify the types of files to include or exclude from a search.  TYPE is a filetype, like perl or xml.
           --type=perl can also be specified as --perl, and --type=noperl can be done as --noperl.

           If a file is of both type "foo" and "bar", specifying --foo and --nobar will exclude the file, because an
           exclusion takes precedence over an inclusion.

           Type specifications can be repeated and are ORed together.

           See ack-grep --help=types for a list of valid types.

       --type-add TYPE=.EXTENSION[,.EXT2[,...]]
           Files with the given EXTENSION(s) are recognized as being of (the existing) type TYPE. See also "Defining your own
           types".

       --type-set TYPE=.EXTENSION[,.EXT2[,...]]
           Files with the given EXTENSION(s) are recognized as being of type TYPE. This replaces an existing definition for
           type TYPE.  See also "Defining your own types".

       -u, --unrestricted
           All files and directories (including blib/, core.*, ...) are searched, nothing is skipped. When both -u and
           --ignore-dir are used, the --ignore-dir option has no effect.

       -v, --invert-match
           Invert match: select non-matching lines

           This applies only to the PATTERN, not to the regexes given for the -g and -G options.

       --version
           Display version and copyright information.

       -w, --word-regexp
           Force PATTERN to match only whole words.  The PATTERN is wrapped with "\b" metacharacters.

           This applies only to the PATTERN, not to the regexes given for the -g and -G options.

       -1  Stops after reporting first match of any kind.  This is different from --max-count=1 or -m1, where only one match
           per file is shown.  Also, -1 works with -f and -g, where -m does not.

THE .ackrc FILE
       The .ackrc file contains command-line options that are prepended to the command line before processing.  Multiple
       options may live on multiple lines.  Lines beginning with a # are ignored.  A .ackrc might look like this:

           # Always sort the files
           --sort-files

           # Always color, even if piping to a another program
           --color

           # Use "less -r" as my pager
           --pager=less -r

       Note that arguments with spaces in them do not need to be quoted, as they are not interpreted by the shell. Basically,
       each line in the .ackrc file is interpreted as one element of @ARGV.

       ack-grep looks in your home directory for the .ackrc.  You can specify another location with the ACKRC variable,
       below.

       If --noenv is specified on the command line, the .ackrc file is ignored.

Defining your own types
       ack-grep allows you to define your own types in addition to the predefined types. This is done with command line
       options that are best put into an .ackrc file - then you do not have to define your types over and over again. In the
       following examples the options will always be shown on one command line so that they can be easily copy & pasted.

       ack-grep --perl foo searches for foo in all perl files. ack-grep --help=types tells you, that perl files are files
       ending in .pl, .pm, .pod or .t. So what if you would like to include .xs files as well when searching for --perl
       files? ack-grep --type-add perl=.xs --perl foo does this for you. --type-add appends additional extensions to an
       existing type.

       If you want to define a new type, or completely redefine an existing type, then use --type-set. ack-grep --type-set
       eiffel=.e,.eiffel defines the type eiffel to include files with the extensions .e or .eiffel. So to search for all
       eiffel files containing the word Bertrand use ack-grep --type-set eiffel=.e,.eiffel --eiffel Bertrand.  As usual, you
       can also write --type=eiffel instead of --eiffel. Negation also works, so --noeiffel excludes all eiffel files from a
       search. Redefining also works: ack-grep --type-set cc=.c,.h and .xs files no longer belong to the type cc.

       When defining your own types in the .ackrc file you have to use the following:

         --type-set=eiffel=.e,.eiffel

       or writing on separate lines

         --type-set
         eiffel=.e,.eiffel

       The following does NOT work in the .ackrc file:

         --type-set eiffel=.e,.eiffel

       In order to see all currently defined types, use --help types, e.g.  ack-grep --type-set backup=.bak --type-add
       perl=.perl --help types

       Restrictions:

       ·   The types 'skipped', 'make', 'binary' and 'text' are considered "builtin" and cannot be altered.

       ·   The shebang line recognition of the types 'perl', 'ruby', 'php', 'python', 'shell' and 'xml' cannot be redefined
           by --type-set, it is always active. However, the shebang line is only examined for files where the extension is
           not recognised. Therefore it is possible to say ack-grep --type-set perl=.perl --type-set foo=.pl,.pm,.pod,.t
           --perl --nofoo and only find your shiny new .perl files (and all files with unrecognized extension and perl on the
           shebang line).

ENVIRONMENT VARIABLES
       For commonly-used ack-grep options, environment variables can make life much easier.  These variables are ignored if
       --noenv is specified on the command line.

       ACKRC
           Specifies the location of the .ackrc file.  If this file doesn't exist, ack-grep looks in the default location.

       ACK_OPTIONS
           This variable specifies default options to be placed in front of any explicit options on the command line.

       ACK_COLOR_FILENAME
           Specifies the color of the filename when it's printed in --group mode.  By default, it's "bold green".

           The recognized attributes are clear, reset, dark, bold, underline, underscore, blink, reverse, concealed black,
           red, green, yellow, blue, magenta, on_black, on_red, on_green, on_yellow, on_blue, on_magenta, on_cyan, and
           on_white.  Case is not significant.  Underline and underscore are equivalent, as are clear and reset.  The color
           alone sets the foreground color, and on_color sets the background color.

           This option can also be set with --color-filename.

       ACK_COLOR_MATCH
           Specifies the color of the matching text when printed in --color mode.  By default, it's "black on_yellow".

           This option can also be set with --color-match.

           See ACK_COLOR_FILENAME for the color specifications.

       ACK_COLOR_LINENO
           Specifies the color of the line number when printed in --color mode.  By default, it's "bold yellow".

           This option can also be set with --color-lineno.

           See ACK_COLOR_FILENAME for the color specifications.

       ACK_PAGER
           Specifies a pager program, such as "more", "less" or "most", to which ack-grep will send its output.

           Using "ACK_PAGER" does not suppress grouping and coloring like piping output on the command-line does, except that
           on Windows ack-grep will assume that "ACK_PAGER" does not support color.

           "ACK_PAGER_COLOR" overrides "ACK_PAGER" if both are specified.

       ACK_PAGER_COLOR
           Specifies a pager program that understands ANSI color sequences.  Using "ACK_PAGER_COLOR" does not suppress
           grouping and coloring like piping output on the command-line does.

           If you are not on Windows, you never need to use "ACK_PAGER_COLOR".

ACK & OTHER TOOLS
   Vim integration
       ack-grep integrates easily with the Vim text editor. Set this in your .vimrc to use ack-grep instead of grep:

           set grepprg=ack-grep\ -a

       That examples uses "-a" to search through all files, but you may use other default flags. Now you can search with ack-
       grep and easily step through the results in Vim:

         :grep Dumper perllib

   Emacs integration
       Phil Jackson put together an ack.el extension that "provides a simple compilation mode ... has the ability to guess
       what files you want to search for based on the major-mode."

       <http://www.shellarchive.co.uk/content/emacs.html>

   TextMate integration
       Pedro Melo is a TextMate user who writes "I spend my day mostly inside TextMate, and the built-in find-in-project
       sucks with large projects.  So I hacked a TextMate command that was using find + grep to use ack-grep.  The result is
       the Search in Project with ack-grep, and you can find it here:
       <http://www.simplicidade.org/notes/archives/2008/03/search_in_proje.html>"

   Shell and Return Code
       For greater compatibility with grep, ack-grep in normal use returns shell return or exit code of 0 only if something
       is found and 1 if no match is found.

       (Shell exit code 1 is "$?=256" in perl with "system" or backticks.)

       The grep code 2 for errors is not used.

       If "-f" or "-g" are specified, then 0 is returned if at least one file is found.  If no files are found, then 1 is
       returned.

DEBUGGING ACK-GREP PROBLEMS
       If ack-grep gives you output you're not expecting, start with a few simple steps.

   Use --noenv
       Your environment variables and .ackrc may be doing things you're not expecting, or forgotten you specified.  Use
       --noenv to ignore your environment and .ackrc.

   Use -f to see what files you're scanning
       The reason I created -f in the first place was as a debugging tool.  If ack-grep is not finding matches you think it
       should find, run ack-grep -f to see what files are being checked.

TIPS
   Use the .ackrc file.
       The .ackrc is the place to put all your options you use most of the time but don't want to remember.  Put all your
       --type-add and --type-set definitions in it.  If you like --smart-case, set it there, too.  I also set --sort-files
       there.

   Use -f for working with big codesets
       Ack-Grep does more than search files.  "ack-grep -f --perl" will create a list of all the Perl files in a tree, ideal
       for sending into xargs.  For example:

           # Change all "this" to "that" in all Perl files in a tree.
           ack-grep -f --perl | xargs perl -p -i -e's/this/that/g'

       or if you prefer:

           perl -p -i -e's/this/thatg/' $(ack-grep -f --perl)

   Use -Q when in doubt about metacharacters
       If you're searching for something with a regular expression metacharacter, most often a period in a filename or IP
       address, add the -Q to avoid false positives without all the backslashing.  See the following example for more...

   Use ack-grep to watch log files
       Here's one I used the other day to find trouble spots for a website visitor.  The user had a problem loading
       troublesome.gif, so I took the access log and scanned it with ack-grep twice.

           ack-grep -Q aa.bb.cc.dd /path/to/access.log | ack-grep -Q -B5 troublesome.gif

       The first ack-grep finds only the lines in the Apache log for the given IP.  The second finds the match on my
       troublesome GIF, and shows the previous five lines from the log in each case.

   Share your knowledge
       Join the ack-users mailing list.  Send me your tips and I may add them here.

FAQ
   Why isn't ack-grep finding a match in (some file)?
       Probably because it's of a type that ack-grep doesn't recognize.  ack-grep's searching behavior is driven by filetype.
       If ack-grep doesn't know what kind of file it is, ack-grep ignores the file.

       Use the "-f" switch to see a list of files that ack-grep will search for you.

       If you want ack-grep to search files that it doesn't recognize, use the "-a" switch.

       If you want ack-grep to search every file, even ones that it always ignores like coredumps and backup files, use the
       "-u" switch.

   Why does ack-grep ignore unknown files by default?
       ack-grep is designed by a programmer, for programmers, for searching large trees of code.  Most codebases have a lot
       files in them which aren't source files (like compiled object files, source control metadata, etc), and grep wastes a
       lot of time searching through all of those as well and returning matches from those files.

       That's why ack-grep's behavior of not searching things it doesn't recognize is one of its greatest strengths: the
       speed you get from only searching the things that you want to be looking at.

   Wouldn't it be great if ack-grep did search & replace?
       No, ack-grep will always be read-only.  Perl has a perfectly good way to do search & replace in files, using the "-i",
       "-p" and "-n" switches.

       You can certainly use ack-grep to select your files to update.  For example, to change all "foo" to "bar" in all PHP
       files, you can do this from the Unix shell:

           $ perl -i -p -e's/foo/bar/g' $(ack-grep -f --php)

   Can you make ack-grep recognize .xyz files?
       That's an enhancement.  Please see the section in the manual about enhancements.

   There's already a program/package called ack.
       Yes, I know.

   Why is it called ack-grep if it's called ack?
       The name of the program is "ack".  Some packagers have called it "ack-grep" when creating packages because there's
       already a package out there called "ack" that has nothing to do with this ack.

       I suggest you make a symlink named ack that points to ack-grep because one of the crucial benefits of ack is having a
       name that's so short and simple to type.

       To do that, run this with sudo or as root:

          ln -s /usr/bin/ack-grep /usr/bin/ack

   What does ack mean?
       Nothing.  I wanted a name that was easy to type and that you could pronounce as a single syllable.

   Can I do multi-line regexes?
       No, ack-grep does not support regexes that match multiple lines.  Doing so would require reading in the entire file at
       a time.

       If you want to see lines near your match, use the "--A", "--B" and "--C" switches for displaying context.

AUTHOR
       Andy Lester, "<andy at petdance.com>"

BUGS
       Please report any bugs or feature requests to the issues list at Github: <http://github.com/petdance/ack/issues>

ENHANCEMENTS
       All enhancement requests MUST first be posted to the ack-users mailing list at
       http://groups.google.com/group/ack-users <http://groups.google.com/group/ack-users>.  I will not consider a request
       without it first getting seen by other ack-grep users.  This includes requests for new filetypes.

       There is a list of enhancements I want to make to ack-grep in the ack issues list at Github:
       <http://github.com/petdance/ack/issues>

       Patches are always welcome, but patches with tests get the most attention.

SUPPORT
       Support for and information about ack-grep can be found at:

       ·   The ack homepage

           <http://betterthangrep.com/>

       ·   The ack issues list at Github

           <http://github.com/petdance/ack/issues>

       ·   AnnoCPAN: Annotated CPAN documentation

           <http://annocpan.org/dist/ack>

       ·   CPAN Ratings

           <http://cpanratings.perl.org/d/ack>

       ·   Search CPAN

           <http://search.cpan.org/dist/ack>

       ·   Git source repository

           <http://github.com/petdance/ack>

ACKNOWLEDGEMENTS
       How appropriate to have acknowledgements!

       Thanks to everyone who has contributed to ack-grep in any way, including Matthew Wild, Scott Kyle, Nick Hooey, Bo
       Borgerson, Mark Szymanski, Marq Schneider, Packy Anderson, JR Boyens, Dan Sully, Ryan Niebur, Kent Fredric, Mike
       Morearty, Ingmar Vanhassel, Eric Van Dewoestine, Sitaram Chamarty, Adam James, Richard Carlsson, Pedro Melo, AJ
       Schuster, Phil Jackson, Michael Schwern, Jan Dubois, Christopher J. Madsen, Matthew Wickline, David Dyck, Jason
       Porritt, Jjgod Jiang, Thomas Klausner, Uri Guttman, Peter Lewis, Kevin Riggle, Ori Avtalion, Torsten Blix, Nigel
       Metheringham, Gabor Szabo, Tod Hagan, Michael Hendricks, AEvar Arnfjoer` Bjarmason, Piers Cawley, Stephen Steneker,
       Elias Lutfallah, Mark Leighton Fisher, Matt Diephouse, Christian Jaeger, Bill Sully, Bill Ricker, David Golden, Nilson
       Santos F. Jr, Elliot Shank, Merijn Broeren, Uwe Voelker, Rick Scott, Ask Bjorn Hansen, Jerry Gay, Will Coleda, Mike
       O'Regan, Slaven ReziX, Mark Stosberg, David Alan Pisoni, Adriano Ferreira, James Keenan, Leland Johnson, Ricardo
       Signes and Pete Krawczyk.

COPYRIGHT & LICENSE
       Copyright 2005-2011 Andy Lester.

       This program is free software; you can redistribute it and/or modify it under the terms of the Artistic License v2.0.



perl v5.14.2                                              2012-06-08                                             ACK-GREP(1p)

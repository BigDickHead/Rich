Vim  remote mode

==============================================================================

1. Common functionality                 *clientserver*

When compiled with the |+clientserver| option, Vim can act as a command
server.  It accepts messages from a client and executes them.  At the same
time, Vim can function as a client and send commands to a Vim server.

The following command line arguments are available:

    argument            meaning 


   --remote [+{cmd}] {file} ...                 *--remote*
                Open the file list in a remote Vim.  When
                there is no Vim server, execute locally.
                There is one optional init command: +{cmd}.
                This must be an Ex command that can be
                followed by "|".
                The rest of the command line is taken as the
                file list.  Thus any non-file arguments must
                come before this.
                You cannot edit stdin this way |--|.
                The remote Vim is raised.  If you don't want
                this use
                 vim --remote-send "<C-\><C-N>:n filename<CR>"

   --remote-silent [+{cmd}] {file} ...          *--remote-silent*
                As above, but don't complain if there is no
                server and the file is edited locally.

   --remote-wait [+{cmd}] {file} ...                *--remote-wait*
                As --remote, but wait for files to complete
                (unload) in remote Vim.

   --remote-wait-silent [+{cmd}] {file} ...     *--remote-wait-silent*
                As --remote-wait, but don't complain if there
                is no server.

                            *--remote-tab*
   --remote-tab         Like --remote but open each file in a new
                tabpage.

                            *--remote-tab-silent*
   --remote-tab-silent      Like --remote-silent but open each file in a
                new tabpage.

                            *--remote-tab-wait*
   --remote-tab-wait        Like --remote-wait but open each file in a new
                tabpage.


                        *--remote-tab-wait-silent*
   --remote-tab-wait-silent Like --remote-wait-silent but open each file
                in a new tabpage.

                                *--servername*
   --servername {name}      Become the server {name}.  When used together
                with one of the --remote commands: connect to
                server {name} instead of the default (see
                below).

                                *--remote-send*
   --remote-send {keys}     Send {keys} to server and exit.  The {keys}
                are not mapped.  Special key names are
                recognized, e.g., "<CR>" results in a CR
                character.

                                *--remote-expr*
   --remote-expr {expr}     Evaluate {expr} in server and print the result
                on stdout.

                                *--serverlist*
   --serverlist         Output a list of server names.


Examples 

Edit "file.txt" in an already running GVIM server:
    gvim --remote file.txt

Edit "file.txt" in an already running server called FOOBAR:
    gvim --servername FOOBAR --remote file.txt

Edit "file.txt" in server "FILES" if it exists, become server "FILES"
otherwise:
    gvim --servername FILES --remote-silent file.txt

This doesn't work, all arguments after --remote will be used as file names:
    gvim --remote --servername FOOBAR file.txt

Edit file "+foo" in a remote server (note the use of "./" to avoid the special
meaning of the leading plus):
    vim --remote ./+foo

Tell the remote server "BLA" to write all files and exit:
    vim --servername BLA --remote-send '<C-\><C-N>:wqa<CR>'


SERVER NAME

By default Vim will try to register the name under which it was invoked (gvim,
egvim ...).  This can be overridden with the --servername argument.  If the
specified name is not available, a postfix is applied until a free name is
encountered, i.e. "gvim1" for the second invocation of gvim on a particular
X-server.  The resulting name is available in the servername builtin variable
|v:servername|.  The case of the server name is ignored, thus "gvim" and
"GVIM" are considered equal.

When Vim is invoked with --remote, --remote-wait or --remote-send it will try
to locate the server name determined by the invocation name and --servername
argument as described above.  If an exact match is not available, the first
server with the number postfix will be used.  If a name with the number
postfix is specified with the --servername argument, it must match exactly.

If no server can be located and --remote or --remote-wait was used, Vim will
start up according to the rest of the command line and do the editing by
itself.  This way it is not necessary to know whether gvim is already started
when sending command to it.

The --serverlist argument will cause Vim to print a list of registered command
servers on the standard output (stdout) and exit.

Win32 Note: Making the Vim server go to the foreground doesn't always work,
because MS-Windows doesn't allow it.  The client will move the server to the
foreground when using the --remote or --remote-wait argument and the server
name starts with "g".


REMOTE EDITING

The --remote argument will cause a |:drop| command to be constructed from the
rest of the command line and sent as described above.
The --remote-wait argument does the same thing and additionally sets up to
wait for each of the files to have been edited.  This uses the BufUnload
event, thus as soon as a file has been unloaded, Vim assumes you are done
editing it.
Note that the --remote and --remote-wait arguments will consume the rest of
the command line.  I.e. all remaining arguments will be regarded as filenames.
You can not put options there!


FUNCTIONS

                                *E240* *E573*
There are a number of Vim functions for scripting the command server.  See
the description in |eval.txt| or use CTRL-] on the function name to jump to
the full explanation.

    synopsis                     explanation 
    remote_expr( server, string, idvar)      send expression
    remote_send( server, string, idvar)      send key sequence
    serverlist()                 get a list of available servers
    remote_peek( serverid, retvar)       check for reply string
    remote_read( serverid)           read reply string
    server2client( serverid, string)         send reply string
    remote_foreground( server)           bring server to the front

See also the explanation of |CTRL-\_CTRL-N|.  Very useful as a leading key
sequence.
The {serverid} for server2client() can be obtained with expand("<client>")

==============================================================================

2. X11 specific items                   *x11-clientserver*

                    *E247* *E248* *E251* *E258* *E277*

The communication between client and server goes through the X server.  The
display of the Vim server must be specified.  The usual protection of the X
server is used, you must be able to open a window on the X server for the
communication to work.  It is possible to communicate between different
systems.

By default, a GUI Vim will register a name on the X-server by which it can be
addressed for subsequent execution of injected strings.  Vim can also act as
a client and send strings to other instances of Vim on the same X11 display.

When an X11 GUI Vim (gvim) is started, it will try to register a send-server
name on the 'VimRegistry' property on the root window.

A non GUI Vim with access to the X11 display (|xterm-clipboard| enabled), can
also act as a command server if a server name is explicitly given with the
--servername argument.

An empty --servername argument will cause the command server to be disabled.

To send commands to a Vim server from another application, read the source
file src/if_xcmdsrv.c, it contains some hints about the protocol used.

==============================================================================

3. Win32 specific items                 *w32-clientserver*

Every Win32 Vim can work as a server, also in the console.  You do not need a
version compiled with OLE.  Windows messages are used, this works on any
version of MS-Windows.  But only communication within one system is possible.

Since MS-Windows messages are used, any other application should be able to
communicate with a Vim server.  An alternative is using the OLE functionality
|ole-interface|.

When using gvim, the --remote-wait only works properly this way:

    start /w gvim --remote-wait file.txt




1. 通用功能 *clientserver*

如果编译时加入 |+clientserver| 特性，Vim 可以作为命令服务器，接受客户的消息并
执行。同时，Vim 也可以作为客户端，发送消息给 Vim 服务器。

可以使用以下的命令行参数:

     参数                       意义    

   --remote [+{cmd}] {file} ...                                 *--remote*
                                在远端打开文件列表。如果没有 Vim 服务器，就在
                                本地执行。
                                有一个可选的初始命令: #{cmd}，它必须是后面可以
                                跟 "|" 的 Ex 命令。
                                命令行的其余部分将作为文件列表。所以，非文件
                                的参数一定要在此之前出现。
                                你不能用这个方法编辑标准输入 |--|。
                                远端的 Vim 将被推向前台。如果不想如此，用
                                 vim --remote-send "<C-\><C-N>:n filename<CR>"
   --remote-silent [+{cmd}] {file} ...                  *--remote-silent*
                                同上，但如果服务器没打开而需要本地编辑，不产生
                                警告。
   --remote-wait [+{cmd}] {file} ...                            *--remote-wait*
                                同 --remote，但直到所有的文件在远端被完成 (卸
                                载) 为止才返回。
   --remote-wait-silent [+{cmd}] {file} ...             *--remote-wait-silent*
                                同 --remote-wait，但如果服务器没打开，不产生警
                                告。
                                                        *--remote-tab*
   --remote-tab                 同 --remote 但用新标签页打开每个文件。
                                                        *--remote-tab-silent*
   --remote-tab-silent          同 --remote-silent 但用新标签页打开每个文件。
                                                        *--remote-tab-wait*
   --remote-tab-wait            同 --remote-wait 但用新标签页打开每个文件。

                                                *--remote-tab-wait-silent*
   --remote-tab-wait-silent     同 --remote-wait-silent 但用新标签页打开每个文
                                件。
                                                                *--servername*
   --servername {name}          成为用 {name} 作为名字的服务器。如果同时也用了
                                某个 --remote 命令，连接到服务器 {name}，而不
                                使用缺省的名字。 (见下)。
                                                                *--remote-send*
   --remote-send {keys}         发送键序列 {keys} 到服务器，然后退出。{keys}
                                不通过映射。能识别特殊的键名，如 "<CR>" 会生成
                                CR 字符。
                                                                *--remote-expr*
   --remote-expr {expr}         在服务器上执行 {expr}。然后在标准输出上打出结
                                果。
                                                                *--serverlist*
   --serverlist                 输出可用的服务器名字的列表。


示例 

在一个已经运行的 GVIM 服务器上编辑 "file.txt"。
    gvim --remote file.txt

在一个已经运行的名为 FOOBAR 的服务器上编辑 "file.txt"。
    gvim --servername FOOBAR --remote file.txt

在名为 "FILES" 的服务器上编辑 "file.txt"，如果不存在这个服务器，自己成为服务器
"FILES"。
    gvim --servername FILES --remote-silent file.txt

下面的例子不能工作。--remote 之后所有的参数都被视作文件名:
    gvim --remote --servername FOOBAR file.txt

在远端服务器上编辑文件 "+foo" (注意 "./" 的使用避免了打头的加号的特别含义)。
    vim --remote ./+foo

告诉远端服务器 "BLA" 写入所有文件，并且退出。
    vim --servername BLA --remote-send '<C-\><C-N>:wqa<CR>'


服 务 器 名

缺省地，Vim 试图用启动时的名字注册服务器名 (gvim、egvim ...)，你可以用
--servername 参数覆盖之。如果不能用指定的名字，尝试附加一个后缀，直到找到一个
空闲的名字为止。比如，在同一个 X 服务器上，第二次启动 gvim 的服务器名会是
"gvim1"。可以通过 |v:servername| 得到最终的服务器名。这里忽略大小写的区别，所
以 "gvim" 和 "GVIM" 重复。

当 Vim 启动时带有 --remote、--remote-wait 或者 --remote-send 参数时，会根据上
述的方法由启动名和指定的 --servername 参数决定要访问的服务器名。如果准确的匹
配找不到，寻找第一个可以带数字后缀的服务器。不过，如果 --servername 给出的名字
已经带有数字后缀，必须准确匹配。

如果使用 --remote 和 --remote-wait 但没有可用的服务器，Vim 会根据剩余的参数启
动，自己编辑这些文件。这样，发送命令给 gvim 的时候，就不需要关心它是否已经启
动。

--serverlist 参数让 Vim 在标准输出 (stdout) 上打出所有已经注册的命令服务器，然
后退出。

Win32 注意事项: 不一定总能把 Vim 服务器切换到在前台，因为 MS-Windows 不允许这
么做。客户通过 --remote 和 --remote-wait 参数调用而服务器名以 "g" 开始的时候，
服务器将被推向前台。


远 程 编 辑

用上面的结果，--remote 参数随后基于其后的参数构造一个 |:drop| 命令并发送之。
--remote-wait 也会这么做，但同时等待所有文件编辑任务的完成。这是通过 BufUnload
事件完成的。文件卸载时，Vim 假设你完成了它的编辑任务。
注意: --remote 和 --remote-list 参数会吃掉命令行余下的部分。也就是说，余下的参
数都被认为是文件名，不要把参数放在那里！

函 数
                                                                *E240* *E573*
若干 Vim 的函数可以用来书写命令服务器的脚本。参见 |eval.txt| 的描述，也可以在
下面的函数名字上按 CTRL-] 以得到它们完整的描述。

    摘要                                     解释 
    remote_expr( server, string, idvar)      发送表达式
    remote_send( server, string, idvar)      发送键序列
    serverlist()                             得到可用服务器的列表
    remote_peek( serverid, retvar)           检查返回的字符串
    remote_read( serverid)                   读取返回的字符串
    server2client( serverid, string)         发送返回字符串
    remote_foreground( server)               把服务器推向前台

也可参考 |CTRL-\_CTRL-N|，它可用来引导键序列。
server2client() 的 {serverid} 可以通过 expand("<client>") 得到。

2. X11 专用条目 *x11-clientserver*
                                    *E247* *E248* *E251* *E258* *E277*

客户和服务器的通信是通过 X 服务器进行的。必须指明 Vim 服务器所处的 DISPLAY 位
置。通常的 X 服务器的保护措施这里也适用，你必须有权限在 X 服务器上打开一个窗
口，这样不同系统间的通信才有可能。

缺省地，GUI 的 Vim 会在 X 服务器上注册一个名字，使得后续的执行能通过这个名字寻
址并向它发送字符串。Vim 也可以作为一个客户端，给同一个 X11 显示上的其它 Vim 实
例发送字符串。

X11 GUI 的 Vim (gvim) 启动时，会试图在根窗口的 'VimRegistry' 属性上注册发送服
务器的名字。

非 GUI 但可以访问到 X11 显示的 Vim (打开了 |xterm-clipboard|) 也可以作为命令服
务器，只要服务器名通过 --servername 参数明确给出就行了。

空的 --servername 参数关闭命令服务器。

要从别的应用程序向 Vim 服务器发送命令，可以阅读源代码 src/if_xcmdsrv.c。那里包
含了 Vim 使用的协议的一些情况。

3. Win32 专用条目 *w32-clientserver*

每个 Win32 的 Vim 都可以作为服务器，包括控制台版本。你不需要编译时带 OLE 的版
本。我们使用 Windows 消息，它适用于任何版本的 MS-Windows。不过，它只允许在同一
个机器上进行通信。

因为我们使用 MS-Windows 的消息，别的应用程序也可以和 Vim 服务器通信。一个替代
方案是用 OLE 功能 |ole-interface|。

如果用 gvim，--remote-wait 正确的使用方法只能是:

        start /w gvim --remote-wait file.txt

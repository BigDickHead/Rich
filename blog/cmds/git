GIT(1)                                                    Git Manual                                                   GIT(1)



NAME
       git - the stupid content tracker

SYNOPSIS
       git [--version] [--help] [-c <name>=<value>]
           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]
           [-p|--paginate|--no-pager] [--no-replace-objects] [--bare]
           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]
           <command> [<args>]


DESCRIPTION
       Git is a fast, scalable, distributed revision control system with an unusually rich command set that provides both
       high-level operations and full access to internals.

       See gittutorial(7) to get started, then see Everyday Git[1] for a useful minimum set of commands, and "man
       git-commandname" for documentation of each command. CVS users may also want to read gitcvs-migration(7). See the Git
       User’s Manual[2] for a more in-depth introduction.

       The <command> is either a name of a Git command (see below) or an alias as defined in the configuration file (see git-
       config(1)).

       Formatted and hyperlinked version of the latest git documentation can be viewed at
       http://www.kernel.org/pub/software/scm/git/docs/.

OPTIONS
       --version
           Prints the git suite version that the git program came from.

       --help
           Prints the synopsis and a list of the most commonly used commands. If the option --all or -a is given then all
           available commands are printed. If a git command is named this option will bring up the manual page for that
           command.

           Other options are available to control how the manual page is displayed. See git-help(1) for more information,
           because git --help ...  is converted internally into git help ....

       -c <name>=<value>
           Pass a configuration parameter to the command. The value given will override values from configuration files. The
           <name> is expected in the same format as listed by git config (subkeys separated by dots).

       --exec-path[=<path>]
           Path to wherever your core git programs are installed. This can also be controlled by setting the GIT_EXEC_PATH
           environment variable. If no path is given, git will print the current setting and then exit.

       --html-path
           Print the path, without trailing slash, where git’s HTML documentation is installed and exit.

       --man-path
           Print the manpath (see man(1)) for the man pages for this version of git and exit.

       --info-path
           Print the path where the Info files documenting this version of git are installed and exit.

       -p, --paginate
           Pipe all output into less (or if set, $PAGER) if standard output is a terminal. This overrides the pager.<cmd>
           configuration options (see the "Configuration Mechanism" section below).

       --no-pager
           Do not pipe git output into a pager.

       --git-dir=<path>
           Set the path to the repository. This can also be controlled by setting the GIT_DIR environment variable. It can be
           an absolute path or relative path to current working directory.

       --work-tree=<path>
           Set the path to the working tree. It can be an absolute path or a path relative to the current working directory.
           This can also be controlled by setting the GIT_WORK_TREE environment variable and the core.worktree configuration
           variable (see core.worktree in git-config(1) for a more detailed discussion).

       --namespace=<path>
           Set the git namespace. See gitnamespaces(7) for more details. Equivalent to setting the GIT_NAMESPACE environment
           variable.

       --bare
           Treat the repository as a bare repository. If GIT_DIR environment is not set, it is set to the current working
           directory.

       --no-replace-objects
           Do not use replacement refs to replace git objects. See git-replace(1) for more information.

FURTHER DOCUMENTATION
       See the references above to get started using git. The following is probably more detail than necessary for a
       first-time user.

       The git concepts chapter of the user-manual[3] and gitcore-tutorial(7) both provide introductions to the underlying
       git architecture.

       See gitworkflows(7) for an overview of recommended workflows.

       See also the howto[4] documents for some useful examples.

       The internals are documented in the GIT API documentation[5].

GIT COMMANDS
       We divide git into high level ("porcelain") commands and low level ("plumbing") commands.

HIGH-LEVEL COMMANDS (PORCELAIN)
       We separate the porcelain commands into the main commands and some ancillary user utilities.

   Main porcelain commands
       git-add(1)
           Add file contents to the index.

       git-am(1)
           Apply a series of patches from a mailbox.

       git-archive(1)
           Create an archive of files from a named tree.

       git-bisect(1)
           Find by binary search the change that introduced a bug.

       git-branch(1)
           List, create, or delete branches.

       git-bundle(1)
           Move objects and refs by archive.

       git-checkout(1)
           Checkout a branch or paths to the working tree.

       git-cherry-pick(1)
           Apply the changes introduced by some existing commits.

       git-citool(1)
           Graphical alternative to git-commit.

       git-clean(1)
           Remove untracked files from the working tree.

       git-clone(1)
           Clone a repository into a new directory.

       git-commit(1)
           Record changes to the repository.

       git-describe(1)
           Show the most recent tag that is reachable from a commit.

       git-diff(1)
           Show changes between commits, commit and working tree, etc.

       git-fetch(1)
           Download objects and refs from another repository.

       git-format-patch(1)
           Prepare patches for e-mail submission.

       git-gc(1)
           Cleanup unnecessary files and optimize the local repository.

       git-grep(1)
           Print lines matching a pattern.

       git-gui(1)
           A portable graphical interface to Git.

       git-init(1)
           Create an empty git repository or reinitialize an existing one.

       git-log(1)
           Show commit logs.

       git-merge(1)
           Join two or more development histories together.

       git-mv(1)
           Move or rename a file, a directory, or a symlink.

       git-notes(1)
           Add or inspect object notes.

       git-pull(1)
           Fetch from and merge with another repository or a local branch.

       git-push(1)
           Update remote refs along with associated objects.

       git-rebase(1)
           Forward-port local commits to the updated upstream head.

       git-reset(1)
           Reset current HEAD to the specified state.

       git-revert(1)
           Revert some existing commits.

       git-rm(1)
           Remove files from the working tree and from the index.

       git-shortlog(1)
           Summarize git log output.

       git-show(1)
           Show various types of objects.

       git-stash(1)
           Stash the changes in a dirty working directory away.

       git-status(1)
           Show the working tree status.

       git-submodule(1)
           Initialize, update or inspect submodules.

       git-tag(1)
           Create, list, delete or verify a tag object signed with GPG.

       gitk(1)
           The git repository browser.

   Ancillary Commands
       Manipulators:

       git-config(1)
           Get and set repository or global options.

       git-fast-export(1)
           Git data exporter.

       git-fast-import(1)
           Backend for fast Git data importers.

       git-filter-branch(1)
           Rewrite branches.

       git-lost-found(1)
           (deprecated) Recover lost refs that luckily have not yet been pruned.

       git-mergetool(1)
           Run merge conflict resolution tools to resolve merge conflicts.

       git-pack-refs(1)
           Pack heads and tags for efficient repository access.

       git-prune(1)
           Prune all unreachable objects from the object database.

       git-reflog(1)
           Manage reflog information.

       git-relink(1)
           Hardlink common objects in local repositories.

       git-remote(1)
           manage set of tracked repositories.

       git-repack(1)
           Pack unpacked objects in a repository.

       git-replace(1)
           Create, list, delete refs to replace objects.

       git-repo-config(1)
           (deprecated) Get and set repository or global options.

       Interrogators:

       git-annotate(1)
           Annotate file lines with commit information.

       git-blame(1)
           Show what revision and author last modified each line of a file.

       git-cherry(1)
           Find commits not merged upstream.

       git-count-objects(1)
           Count unpacked number of objects and their disk consumption.

       git-difftool(1)
           Show changes using common diff tools.

       git-fsck(1)
           Verifies the connectivity and validity of the objects in the database.

       git-get-tar-commit-id(1)
           Extract commit ID from an archive created using git-archive.

       git-help(1)
           display help information about git.

       git-instaweb(1)
           Instantly browse your working repository in gitweb.

       git-merge-tree(1)
           Show three-way merge without touching index.

       git-rerere(1)
           Reuse recorded resolution of conflicted merges.

       git-rev-parse(1)
           Pick out and massage parameters.

       git-show-branch(1)
           Show branches and their commits.

       git-verify-tag(1)
           Check the GPG signature of tags.

       git-whatchanged(1)
           Show logs with difference each commit introduces.

       gitweb(1)
           Git web interface (web frontend to Git repositories).

   Interacting with Others
       These commands are to interact with foreign SCM and with other people via patch over e-mail.

       git-archimport(1)
           Import an Arch repository into git.

       git-cvsexportcommit(1)
           Export a single commit to a CVS checkout.

       git-cvsimport(1)
           Salvage your data out of another SCM people love to hate.

       git-cvsserver(1)
           A CVS server emulator for git.

       git-imap-send(1)
           Send a collection of patches from stdin to an IMAP folder.

       git-quiltimport(1)
           Applies a quilt patchset onto the current branch.

       git-request-pull(1)
           Generates a summary of pending changes.

       git-send-email(1)
           Send a collection of patches as emails.

       git-svn(1)
           Bidirectional operation between a Subversion repository and git.

LOW-LEVEL COMMANDS (PLUMBING)
       Although git includes its own porcelain layer, its low-level commands are sufficient to support development of
       alternative porcelains. Developers of such porcelains might start by reading about git-update-index(1) and git-read-
       tree(1).

       The interface (input, output, set of options and the semantics) to these low-level commands are meant to be a lot more
       stable than Porcelain level commands, because these commands are primarily for scripted use. The interface to
       Porcelain commands on the other hand are subject to change in order to improve the end user experience.

       The following description divides the low-level commands into commands that manipulate objects (in the repository,
       index, and working tree), commands that interrogate and compare objects, and commands that move objects and references
       between repositories.

   Manipulation commands
       git-apply(1)
           Apply a patch to files and/or to the index.

       git-checkout-index(1)
           Copy files from the index to the working tree.

       git-commit-tree(1)
           Create a new commit object.

       git-hash-object(1)
           Compute object ID and optionally creates a blob from a file.

       git-index-pack(1)
           Build pack index file for an existing packed archive.

       git-merge-file(1)
           Run a three-way file merge.

       git-merge-index(1)
           Run a merge for files needing merging.

       git-mktag(1)
           Creates a tag object.

       git-mktree(1)
           Build a tree-object from ls-tree formatted text.

       git-pack-objects(1)
           Create a packed archive of objects.

       git-prune-packed(1)
           Remove extra objects that are already in pack files.

       git-read-tree(1)
           Reads tree information into the index.

       git-symbolic-ref(1)
           Read and modify symbolic refs.

       git-unpack-objects(1)
           Unpack objects from a packed archive.

       git-update-index(1)
           Register file contents in the working tree to the index.

       git-update-ref(1)
           Update the object name stored in a ref safely.

       git-write-tree(1)
           Create a tree object from the current index.

   Interrogation commands
       git-cat-file(1)
           Provide content or type and size information for repository objects.

       git-diff-files(1)
           Compares files in the working tree and the index.

       git-diff-index(1)
           Compares content and mode of blobs between the index and repository.

       git-diff-tree(1)
           Compares the content and mode of blobs found via two tree objects.

       git-for-each-ref(1)
           Output information on each ref.

       git-ls-files(1)
           Show information about files in the index and the working tree.

       git-ls-remote(1)
           List references in a remote repository.

       git-ls-tree(1)
           List the contents of a tree object.

       git-merge-base(1)
           Find as good common ancestors as possible for a merge.

       git-name-rev(1)
           Find symbolic names for given revs.

       git-pack-redundant(1)
           Find redundant pack files.

       git-rev-list(1)
           Lists commit objects in reverse chronological order.

       git-show-index(1)
           Show packed archive index.

       git-show-ref(1)
           List references in a local repository.

       git-tar-tree(1)
           (deprecated) Create a tar archive of the files in the named tree object.

       git-unpack-file(1)
           Creates a temporary file with a blob’s contents.

       git-var(1)
           Show a git logical variable.

       git-verify-pack(1)
           Validate packed git archive files.

       In general, the interrogate commands do not touch the files in the working tree.

   Synching repositories
       git-daemon(1)
           A really simple server for git repositories.

       git-fetch-pack(1)
           Receive missing objects from another repository.

       git-http-backend(1)
           Server side implementation of Git over HTTP.

       git-send-pack(1)
           Push objects over git protocol to another repository.

       git-update-server-info(1)
           Update auxiliary info file to help dumb servers.

       The following are helper commands used by the above; end users typically do not use them directly.

       git-http-fetch(1)
           Download from a remote git repository via HTTP.

       git-http-push(1)
           Push objects over HTTP/DAV to another repository.

       git-parse-remote(1)
           Routines to help parsing remote repository access parameters.

       git-receive-pack(1)
           Receive what is pushed into the repository.

       git-shell(1)
           Restricted login shell for Git-only SSH access.

       git-upload-archive(1)
           Send archive back to git-archive.

       git-upload-pack(1)
           Send objects packed back to git-fetch-pack.

   Internal helper commands
       These are internal helper commands used by other commands; end users typically do not use them directly.

       git-check-attr(1)
           Display gitattributes information.

       git-check-ref-format(1)
           Ensures that a reference name is well formed.

       git-fmt-merge-msg(1)
           Produce a merge commit message.

       git-mailinfo(1)
           Extracts patch and authorship from a single e-mail message.

       git-mailsplit(1)
           Simple UNIX mbox splitter program.

       git-merge-one-file(1)
           The standard helper program to use with git-merge-index.

       git-patch-id(1)
           Compute unique ID for a patch.

       git-peek-remote(1)
           (deprecated) List the references in a remote repository.

       git-sh-setup(1)
           Common git shell script setup code.

       git-stripspace(1)
           Remove unnecessary whitespace.

CONFIGURATION MECHANISM
       Starting from 0.99.9 (actually mid 0.99.8.GIT), .git/config file is used to hold per-repository configuration options.
       It is a simple text file modeled after .ini format familiar to some people. Here is an example:

           #
           # A '#' or ';' character indicates a comment.
           #

           ; core variables
           [core]
                   ; Don't trust file modes
                   filemode = false

           ; user identity
           [user]
                   name = "Junio C Hamano"
                   email = "junkio@twinsun.com"


       Various commands read from the configuration file and adjust their operation accordingly. See git-config(1) for a
       list.

IDENTIFIER TERMINOLOGY
       <object>
           Indicates the object name for any type of object.

       <blob>
           Indicates a blob object name.

       <tree>
           Indicates a tree object name.

       <commit>
           Indicates a commit object name.

       <tree-ish>
           Indicates a tree, commit or tag object name. A command that takes a <tree-ish> argument ultimately wants to
           operate on a <tree> object but automatically dereferences <commit> and <tag> objects that point at a <tree>.

       <commit-ish>
           Indicates a commit or tag object name. A command that takes a <commit-ish> argument ultimately wants to operate on
           a <commit> object but automatically dereferences <tag> objects that point at a <commit>.

       <type>
           Indicates that an object type is required. Currently one of: blob, tree, commit, or tag.

       <file>
           Indicates a filename - almost always relative to the root of the tree structure GIT_INDEX_FILE describes.

SYMBOLIC IDENTIFIERS
       Any git command accepting any <object> can also use the following symbolic notation:

       HEAD
           indicates the head of the current branch.

       <tag>
           a valid tag name (i.e. a refs/tags/<tag> reference).

       <head>
           a valid head name (i.e. a refs/heads/<head> reference).

       For a more complete list of ways to spell object names, see "SPECIFYING REVISIONS" section in gitrevisions(7).

FILE/DIRECTORY STRUCTURE
       Please see the gitrepository-layout(5) document.

       Read githooks(5) for more details about each hook.

       Higher level SCMs may provide and manage additional information in the $GIT_DIR.

TERMINOLOGY
       Please see gitglossary(7).

ENVIRONMENT VARIABLES
       Various git commands use the following environment variables:

   The git Repository
       These environment variables apply to all core git commands. Nb: it is worth noting that they may be used/overridden by
       SCMS sitting above git so take care if using Cogito etc.

       GIT_INDEX_FILE
           This environment allows the specification of an alternate index file. If not specified, the default of
           $GIT_DIR/index is used.

       GIT_OBJECT_DIRECTORY
           If the object storage directory is specified via this environment variable then the sha1 directories are created
           underneath - otherwise the default $GIT_DIR/objects directory is used.

       GIT_ALTERNATE_OBJECT_DIRECTORIES
           Due to the immutable nature of git objects, old objects can be archived into shared, read-only directories. This
           variable specifies a ":" separated (on Windows ";" separated) list of git object directories which can be used to
           search for git objects. New objects will not be written to these directories.

       GIT_DIR
           If the GIT_DIR environment variable is set then it specifies a path to use instead of the default .git for the
           base of the repository.

       GIT_WORK_TREE
           Set the path to the working tree. The value will not be used in combination with repositories found automatically
           in a .git directory (i.e. $GIT_DIR is not set). This can also be controlled by the --work-tree command line option
           and the core.worktree configuration variable.

       GIT_NAMESPACE
           Set the git namespace; see gitnamespaces(7) for details. The --namespace command-line option also sets this value.

       GIT_CEILING_DIRECTORIES
           This should be a colon-separated list of absolute paths. If set, it is a list of directories that git should not
           chdir up into while looking for a repository directory. It will not exclude the current working directory or a
           GIT_DIR set on the command line or in the environment. (Useful for excluding slow-loading network directories.)

       GIT_DISCOVERY_ACROSS_FILESYSTEM
           When run in a directory that does not have ".git" repository directory, git tries to find such a directory in the
           parent directories to find the top of the working tree, but by default it does not cross filesystem boundaries.
           This environment variable can be set to true to tell git not to stop at filesystem boundaries. Like
           GIT_CEILING_DIRECTORIES, this will not affect an explicit repository directory set via GIT_DIR or on the command
           line.

   git Commits
       GIT_AUTHOR_NAME, GIT_AUTHOR_EMAIL, GIT_AUTHOR_DATE, GIT_COMMITTER_NAME, GIT_COMMITTER_EMAIL, GIT_COMMITTER_DATE, EMAIL
           see git-commit-tree(1)

   git Diffs
       GIT_DIFF_OPTS
           Only valid setting is "--unified=??" or "-u??" to set the number of context lines shown when a unified diff is
           created. This takes precedence over any "-U" or "--unified" option value passed on the git diff command line.

       GIT_EXTERNAL_DIFF
           When the environment variable GIT_EXTERNAL_DIFF is set, the program named by it is called, instead of the diff
           invocation described above. For a path that is added, removed, or modified, GIT_EXTERNAL_DIFF is called with 7
           parameters:

               path old-file old-hex old-mode new-file new-hex new-mode

           where:

       <old|new>-file
           are files GIT_EXTERNAL_DIFF can use to read the contents of <old|new>,

       <old|new>-hex
           are the 40-hexdigit SHA1 hashes,

       <old|new>-mode
           are the octal representation of the file modes.

           The file parameters can point at the user’s working file (e.g.  new-file in "git-diff-files"), /dev/null (e.g.
           old-file when a new file is added), or a temporary file (e.g.  old-file in the index).  GIT_EXTERNAL_DIFF should
           not worry about unlinking the temporary file --- it is removed when GIT_EXTERNAL_DIFF exits.

           For a path that is unmerged, GIT_EXTERNAL_DIFF is called with 1 parameter, <path>.

   other
       GIT_MERGE_VERBOSITY
           A number controlling the amount of output shown by the recursive merge strategy. Overrides merge.verbosity. See
           git-merge(1)

       GIT_PAGER
           This environment variable overrides $PAGER. If it is set to an empty string or to the value "cat", git will not
           launch a pager. See also the core.pager option in git-config(1).

       GIT_EDITOR
           This environment variable overrides $EDITOR and $VISUAL. It is used by several git comands when, on interactive
           mode, an editor is to be launched. See also git-var(1) and the core.editor option in git-config(1).

       GIT_SSH
           If this environment variable is set then git fetch and git push will use this command instead of ssh when they
           need to connect to a remote system. The $GIT_SSH command will be given exactly two arguments: the username@host
           (or just host) from the URL and the shell command to execute on that remote system.

           To pass options to the program that you want to list in GIT_SSH you will need to wrap the program and options into
           a shell script, then set GIT_SSH to refer to the shell script.

           Usually it is easier to configure any desired options through your personal .ssh/config file. Please consult your
           ssh documentation for further details.

       GIT_ASKPASS
           If this environment variable is set, then git commands which need to acquire passwords or passphrases (e.g. for
           HTTP or IMAP authentication) will call this program with a suitable prompt as command line argument and read the
           password from its STDOUT. See also the core.askpass option in git-config(1).

       GIT_FLUSH
           If this environment variable is set to "1", then commands such as git blame (in incremental mode), git rev-list,
           git log, and git whatchanged will force a flush of the output stream after each commit-oriented record have been
           flushed. If this variable is set to "0", the output of these commands will be done using completely buffered I/O.
           If this environment variable is not set, git will choose buffered or record-oriented flushing based on whether
           stdout appears to be redirected to a file or not.

       GIT_TRACE
           If this variable is set to "1", "2" or "true" (comparison is case insensitive), git will print trace: messages on
           stderr telling about alias expansion, built-in command execution and external command execution. If this variable
           is set to an integer value greater than 1 and lower than 10 (strictly) then git will interpret this value as an
           open file descriptor and will try to write the trace messages into this file descriptor. Alternatively, if this
           variable is set to an absolute path (starting with a / character), git will interpret this as a file path and will
           try to write the trace messages into it.

DISCUSSION
       More detail on the following is available from the git concepts chapter of the user-manual[3] and gitcore-tutorial(7).

       A git project normally consists of a working directory with a ".git" subdirectory at the top level. The .git directory
       contains, among other things, a compressed object database representing the complete history of the project, an
       "index" file which links that history to the current contents of the working tree, and named pointers into that
       history such as tags and branch heads.

       The object database contains objects of three main types: blobs, which hold file data; trees, which point to blobs and
       other trees to build up directory hierarchies; and commits, which each reference a single tree and some number of
       parent commits.

       The commit, equivalent to what other systems call a "changeset" or "version", represents a step in the project’s
       history, and each parent represents an immediately preceding step. Commits with more than one parent represent merges
       of independent lines of development.

       All objects are named by the SHA1 hash of their contents, normally written as a string of 40 hex digits. Such names
       are globally unique. The entire history leading up to a commit can be vouched for by signing just that commit. A
       fourth object type, the tag, is provided for this purpose.

       When first created, objects are stored in individual files, but for efficiency may later be compressed together into
       "pack files".

       Named pointers called refs mark interesting points in history. A ref may contain the SHA1 name of an object or the
       name of another ref. Refs with names beginning ref/head/ contain the SHA1 name of the most recent commit (or "head")
       of a branch under development. SHA1 names of tags of interest are stored under ref/tags/. A special ref named HEAD
       contains the name of the currently checked-out branch.

       The index file is initialized with a list of all paths and, for each path, a blob object and a set of attributes. The
       blob object represents the contents of the file as of the head of the current branch. The attributes (last modified
       time, size, etc.) are taken from the corresponding file in the working tree. Subsequent changes to the working tree
       can be found by comparing these attributes. The index may be updated with new content, and new commits may be created
       from the content stored in the index.

       The index is also capable of storing multiple entries (called "stages") for a given pathname. These stages are used to
       hold the various unmerged version of a file when a merge is in progress.

AUTHORS
       Git was started by Linus Torvalds, and is currently maintained by Junio C Hamano. Numerous contributions have come
       from the git mailing list <git@vger.kernel.org[6]>. For a more complete list of contributors, see
       http://git-scm.com/about. If you have a clone of git.git itself, the output of git-shortlog(1) and git-blame(1) can
       show you the authors for specific parts of the project.

REPORTING BUGS
       Report bugs to the Git mailing list <git@vger.kernel.org[6]> where the development and maintenance is primarily done.
       You do not have to be subscribed to the list to send a message there.

SEE ALSO
       gittutorial(7), gittutorial-2(7), Everyday Git[1], gitcvs-migration(7), gitglossary(7), gitcore-tutorial(7),
       gitcli(7), The Git User’s Manual[2], gitworkflows(7)

GIT
       Part of the git(1) suite

NOTES
        1. Everyday Git
           file:///usr/share/doc/git/html/everyday.html

        2. Git User’s Manual
           file:///usr/share/doc/git/html/user-manual.html

        3. git concepts chapter of the user-manual
           file:///usr/share/doc/git/html/user-manual.html#git-concepts

        4. howto
           file:///usr/share/doc/git/html/howto-index.html

        5. GIT API documentation
           file:///usr/share/doc/git/html/technical/api-index.html

        6. git@vger.kernel.org
           mailto:git@vger.kernel.org



3. Set up your Git repository

The first step to using Git with Wine is to set up a local Git repository.

3.1. Downloading and installing Git

It's recommended to install git via your distribution's package manager.

warning: Older versions of Git will not work. You need version 1.4.1 or higher (which was released in July 2006). Old distributions may provide a more recent package as a back port.

If you want to install from source, you can download the latest version of Git from http://www.kernel.org/pub/software/scm/git/ . It installs into ~/bin by default. Building and running Git now requires libcurl and curl to be installed. Debian users can apt-get libcurl3-dev and curl.

warning: It is recommended to use a libcurl version ≥ 7.16 as older versions may contain a bug that will cause git to hang.

3.2. Cloning the Wine Git repository

Checking out from the WineHQ Git repository:

git clone git://source.winehq.org/git/wine.git ~/wine-git
cd ~/wine-git

For older versions of git, or if you are stuck behind a firewall with an uncooperative proxy, you may need to replace git: with http:.

This should leave you with a checked out Wine Git repository in the directory wine-git, which you can then build. The clone takes around 30 minutes for me on an ADSL connection, and transfers around 175MB of data, the size of the complete WineHQ repository.

If all goes well, the output of git config remote.origin.url should be:

$ git config remote.origin.url
git://source.winehq.org/git/wine.git

and you will have a single branch named "master", which can be revealed by running git branch.

3.3. Further configuration

If you plan on sharing or committing any patches at all, you should set your name and email address using:

git config --global user.name "Your Name"
git config --global user.email "me@example.com"

A useful feature of git is its ability to color the output of various commands (diff, status, branch, etc). To enable colors in all commands that support it, when running them from a terminal:

git config --global color.ui auto

Particularly useful is the colored output of the git diff command, as it also highlights trailing whitespace in patches.

Most mail agents now automatically convert patches to mime-type x-diff, however this makes it impossible to quickly read or apply a patch from the wine-patches archive. The trick to work around this is setting the patch extension to .txt with the following command:

git config --global format.suffix .txt

4. Glossary

See also the official Git glossary.

    A blob is a git technical term meaning "file" (sort of).

    A commit (or changeset, or revision) is a snapshot of a codebase. Each commit has a name -- its commit id -- which is a SHA1 hash. Commits can have other names (tags, etc). See the "Specifying revisions" section of the git rev-parse page for details on how refer to commits. The verb to commit means to create a commit.

    A diff (or patch) is a file describing the differences between two sets of files. They are created with the diff -u, git diff or git format-patch commands. If you have code in the "before" state, you can apply the patch (with patch, git apply or git am) and you end up with code in the "after" state.

    The HEAD (or tip) of a branch is the most recent commit. On its own, HEAD means the tip of the current branch.

    master is the main branch. SVN/CVS calls this "trunk".

    The parent of a commit is the one before it in the history. (Commits can technically have more than one parent, but the Wine repo avoids using this feature, preferring a linear history.) Given a commit X, its parent is referred to as X^, and its great-grandparent is referred to as X^^^ or X~3.

    A repository (or repo) is a database storing the source code of every available version of a program, and the author of every change.

    A tree is a git technical term meaning "directory" (sort of), and sometimes means the whole codebase of a project ("the Wine tree").

    The working copy or working tree refers to the files and directories on your file system, the ones you can see and change with the file manager. The git status command will refer to changes to these files as "Changed but not updated". 

5. Managing your changes - the simple way

5.1. Commiting a patch into your local tree

After editing the checked out tree, you can use git status to see which files have changed:

git status

Or you can examine the difference by using git diff:

git diff

To then commit all changed files to your local tree, use the git commit command with the -a option:

git commit -a

If you only wish to commit some files, use:

git commit file1 file2...

or:

git add file1 file2...
git commit

You can get a list of all the commits in the tree using git whatchanged or git log:

git whatchanged     # list of commits, which shows what files were altered
git log             # list of commits
git log --stat      # list of commits, with diffstats
git log --stat -p   # list of commits, with diffstats and patches

5.2. Commit early, commit often

Your local git tree is yours. You should feel free to commit patches frequently, as it's not until you mail them in that they have a chance of being committed.

5.3. Reverting changes in your working copy

If you have edited some files, but decided you don't like the changes you've made and want to undo all the changes that you've made to your working copy, you can use git checkout:

git checkout -f             # revert everything
git checkout file-name      # revert one file

Alternatively, use git reset:

git reset --hard HEAD       # revert everything

5.4. Undoing commits

If you want to undo your most recent commit, you can use the git reset command:

git reset HEAD^          # undo commit, but keep changes to working files
git reset --hard HEAD^   # undo commit, and reset working files as well
git reset --hard HEAD~5  # undo 5 commits
git reset --hard origin  # scrap all changes and start all over again

5.5. Editing commits

To edit the most recent commit:

vi file.c                        # edit the file
git commit --amend file.c        # redo the commit

To edit earlier commits (or reorder or delete them) use the -i (aka --interactive) option to git rebase. So if you are interested in altering the 5 most recent commits use:

git rebase --interactive HEAD~5

This will open your editor, with a list of commits prefixed with pick. To delete a commit, just remove its line. To reorder them, just rearrange the lines. To edit commits, change pick to edit.

Be sure to follow the instructions carefully when doing git-rebase -i. Specifically, when you are editing a commit (that you explicitly requested to edit) and are satisfied with the changes, you must use:

git add file1 file2...
git commit --amend
git rebase --continue

However, when git-rebase -i asks you to edit a commit that you have not requested to edit (e.g. there is a conflict), you must use:

git add file1 file2...
git rebase --continue

This is quite important - not following this carefully will result in merged patches.

5.6. Editing commits (the hard way)

Instructions for those who don't want to use git rebase -i:

If the commit is not the most recent one, but say 5th from the top then you can:

git checkout -b tmp HEAD~5              # rewind to the commit in question
vi file.c                               # edit the file
git commit --amend file.c               # redo the commit without deleting the commit
git rebase --onto tmp master~5 master   # replay the later changes
git branch -D tmp                       # clean up the temporary branch

Where there are a number of files to amend you are probably better off using:

git checkout -b tmp HEAD~5              # rewind to the commit in question
git reset HEAD^                         # delete the commit at the now current point
vi file1.c                              # edit
vi file2.c                              #      the files
git commit -a -c ORIG_HEAD              # redo the commit incorporating all changed files
git rebase --onto tmp master~5 master   # replay the later changes
git branch -D tmp                       # clean up the temporary branch

Where the commit is not the most recent one, but say 5th from the top and you wish to insert a new commit, then you can:

git checkout -b tmp HEAD~5              # rewind to the commit in question
vi new_file.c                           # create the new file
git commit -m "New commit of file new_file.c" new-file.c # create a new commit or a series of commits
git rebase --onto tmp master~5 master   # replay the later changes
git branch -D tmp                       # clean up the temporary branch

Likewise if you want to delete a commit that is not the most recent one, then you can:

git checkout -b tmp HEAD~5              # rewind to the commit in question
git reset HEAD^                         # delete the commit at the now current point
git checkout path/file1 path/file2 etc  # delete the changed files
git rebase --onto tmp master~5 master   # replay the later changes
git branch -D tmp                       # clean up the temporary branch

and the commit is gone. You need to checkout all the changed files though and the rebase may throw some errors for you to resolve as it applies later commits.

5.7. Removing trailing whitespace

Thank you to Mike Kaplinskiy for this very helpful hint:

git rebase --whitespace=fix origin/master

"It fixes whitespace on all the commits that you've made. I think it's pretty good about merge conflicts due to whitespace as well. I don't know of a way of doing this at commit time though."

This is essential for submitting your patches to the Wine project. Please see this post for more information from Mike himself: http://www.winehq.org/pipermail/wine-devel/2010-July/084870.html

Trailing whitespace is highlighted in the output of the git diff command when colored output is enabled (more about this in the Further configuration section).

5.8. Sending patches: generating a patchset

After checking in your local changes (in multiple small commits), you can generate a list of the patches you need to send upstream (i.e. to wine-patches) with the git format-patch command:

git format-patch --keep-subject -o out origin

"origin" is the default name of the upstream WineHQ branch. One file per patch will be created in the directory "out", which you can then load into your mailer and send to wine-patches.

(!) Hint: If you have not already, SubmittingPatches is worth a good look.

5.8.1. Sending the patches using imap

You should be able to put patches directly into an IMAP drafts folder using git imap-send.

git format-patch --stdout --keep-subject origin | git imap-send

Set up the imap server by editing wine/.git/config and adding entries something like this:

[user]
        Name = "Your Name Here"
        email = "your@email.here.com"
[imap]
        folder = "INBOX.Drafts"
        tunnel = "ssh -C -q user@imapserver.net /usr/bin/imapd ./Maildir 2> /dev/null"
[format]
        headers = "To: wine-patches <wine-patches@winehq.org>\nReply-To: wine-devel <wine-devel@winehq.org>\n"

The above works for Courier imap; for Dovecot, change the [imap] section to something like this:

[imap]
        host   = dummy
        folder = "Drafts"
        tunnel = "ssh user@dovecotserver.net /usr/libexec/dovecot/imap  2> /dev/null"

If you would like to send patches directly to your Drafts folder on gmail, change the [imap] section to something like the following:

[imap]
        folder = "[Gmail]/Drafts"
        host = imaps://imap.gmail.com
        user = user
        pass = pass
        port = 993
        sslverify = false

Using Mozilla, sending patches is then just a matter of clicking on "Edit Draft", reviewing the mail and then clicking "Send". If you're using Evolution, you can drag and drop the .patch files into your drafts folder. Patches in the Drafts folder will have the date and time of the timestamp of the commit, hence if you generate multiple times you will have many copies of the same patch with the same date and time. This will be the case until you amend the commit and get a new commit timestamp.

    Important note: Many email clients will alter your email in ways that will prevent them from applying to git. For example, Thunderbird will wrap emails and send them with 'format=flowed', which will make them unusable by git. For Thunderbird, you can follow these instructions to send patches. If all else fails, you can add --attach to your git-format-patch command to send the emails as attachments. 

Setting up ssh simplifies the patch generation by removing the need to enter a password. Use ssh-keygen to create your keys and copy ~/.ssh/id_rsa.pub to ~/.ssh/authorized_keys to allow the tunnel to be created without entering a password.

Using local Thunderbird folders, you can use the following approach to add your patches to the Drafts folder (without using imap):

git format-patch --stdout --attach --keep-subject origin | formail -ds >>"/home/username/.thunderbird/12345678.default/Mail/Local Folders/Drafts"

note: Sometimes you have to rebuild the index of the Drafts folder in Thunderbird to see the mails added this way.

Using local KMail folders, you can use the following approach:

git format-patch --stdout --keep-subject origin | formail -s procmail

Assuming you don't already use procmail to sort your email, you can use the following .procmailrc

:0
/home/username/.maildir/

Now, all you need to do is to set up a new receiving account in KMail that collects mail from /home/username/.maildir and filter emails coming in on that account to your drafts folder.

5.8.2. Sending the patches using SMTP

To reduce the number of arguments you need to provide to the command git send-email you can add an configuration entry:

[format]
        headers = "Reply-To: wine-devel <wine-devel@winehq.org>\n"
[sendemail]
        from=user@example.org
        to = wine-patches <wine-patches@winehq.org>
        smtpserver = smtp.example.org
        smtpuser = userName
        chainreplyto = false
        thread = true

You can then send the patches in the folder out with the command: git send-email out

If you have written an introductional message then you can make the patches a reply to it, by using the following command instead of the first one: git send-email out --in-reply-to "<message id of your introductional email>"

If you want to check your patches first (e.g. to alter subject line), just use the --annotate option to git-send-email.

If you get an error message "relay not permitted" it may help to upgrade to a newer git version.

5.9. Keeping up to date with the Wine Git repository

So now you have a copy of the Wine Git tree, you need to get the patches Alexandre commits to WineHQ. You do this using:

git fetch
git rebase origin

git fetch retrieves new files from the WineHQ Git repository; this should always be a safe operation as it does not change your local file system.

git rebase origin reapplies any local commits you have made onto the latest WineHQ branch. (Technically, it creates a new branch on 'origin', reapplies all the patches in your current HEAD to the new branch, then changes HEAD to the new branch.) Patches already applied upstream will not be reapplied.

A common mistake is to use git fetch by itself. It will only download updates but will not apply them. Another common problem is trying to rebase while having uncommitted changes. To fix this you need to:

git commit -a         # commit changes
git rebase origin     # rebase
git reset HEAD^       # uncommit changes

In old (before v1.4.2) versions of git, if you have not committed any patches to your tree, and you do a fetch and rebase, rebase will deceptively tell you "Nothing to do." This is means "there are no patches to apply to your new tree", not that the tree has not been changed. The rebase was successful.

When you send patches, inevitably, some of your patches will be rejected, while others will be accepted. If you have written a series of patches, but only some of those are rejected, it can be annoying to reorder them, fix one or two problems and resubmit. The main git tools that you can use to help solve this problem are git rebase and git cherry-pick. See here for a discussion on the Git mailing list about rebasing on local branches.

5.10. Resolving merge conflicts

When rebasing, sometimes upstream changes prevent your patches from applying. If there is a conflict, you will see something like this:

Applying <patchname>
error: patch failed: <file>:<line>
error: <file>: patch does not apply
Using index info to reconstruct a base tree...
Falling back to patching base and 3-way merge...
Auto-merged <file>
CONFLICT (content): Merge conflict in <file>
Failed to merge in the changes.
Patch failed at <msgnum>.
When you have resolved this problem run "git rebase --continue".
If you would prefer to skip this patch, instead run "git rebase --skip".
To restore the original branch and stop rebasing run "git rebase --abort".

There are two choices now: resolve the conflict or skip the patch. The file in question will contain conflict markers where the patch failed:

<<<<<<<
[code that caused patch not to be applied]
=======
[what would have been here if the patch had been applied]
>>>>>>>

To resolve the conflict you have to manually merge the code between the conflict markers, leaving the file in a compilable state. After that, run

git add <file>
git rebase --continue

to remove the merge-conflict state and continue with the operation.

Patches can be skipped as follows:

(git reset --hard  # removes the patch)
git rebase --skip  # for older Git version use "am" instead of "rebase" here

6. Managing branches

6.1. Creating a branch

To create a branch, use git checkout with the -b option. For example:

git checkout -b new-branch HEAD~5

This winds back the working directory to HEAD~5, and forks the history there, creating the branch new-branch. The new branch is then becomes current.

6.2. Navigating branches

Use git branch to list all branches.

git branch              # local branches only
git branch -a           # both local and remote branches

To change branch, use git checkout:

git checkout master     # change to branch master

6.3. Merging and rebasing branches

Git allows you to merge branches together; this is not done in the WineHQ repository, so it is easier to just rebase/cherry-pick instead.

6.4. Deleting branches

git branch -D new-branch

6.5. Advanced branching

For more information on managing branches in git, see the GitBranches page.

7. Other useful operations

7.1. Picking patches from another branch

You can cherry pick (apply) a patch from another branch into your current branch using:

git cherry-pick <commit-id>

This will create a new commit, but with authorship information from the original patch.

7.2. Getting rid of timestamp changes

Git considers a file changed if its date is different from that in the Git index file. "git diff-index HEAD" may show files have changed if you have edited them and reverted the changes (or even just touched the file). You can remove this difference using:

git reset

7.3. Regression testing

    See RegressionTesting for instructions. 

Regression testing is really easy with Git. It's done with the help of git bisect that does all the magic. So all that's left to do is to compile and test. Even non-developers can do it.

7.4. Viewing the Git tree

You can browse the WineHQ Git repositories on the web at http://source.winehq.org/git. If you have a webserver running, git instaweb allows you to view your local tree in your web browser.

There's a nice tool to view your Git repository named gitk, written in tcl/tk. AJ suggests using something like gitk wine-1.0.. to make it go faster (please note that the trailing .. is important).

qgit also provides similar functionality, but in a Qt based interface. It appears to be faster than gitk and has additional features such as an annotation facility to identify which change introduced each line of a file.

If you prefer using your terminal, "git lol" and "git lola" are useful aliases you can add to your ~/.gitconfig file:

[alias]
    lol = log --graph --decorate --pretty=oneline --abbrev-commit
    lola = log --graph --decorate --pretty=oneline --abbrev-commit --all

7.5. Committer statistics

To see a list of committers in the last 5 years, sorted by number of commits:

git shortlog -s -n --since="(5years)"

7.6. Finding who changed what

git log /path/           # log of changes to files in /path/
git log /path/file       # log of changes to /path/file
git blame /path/file     # show per-line authorship info
git blame -w /path/file  # ditto, but ignoring whitespace changes

8. Working with GitHub

8.1. Introduction

GitHub, through its ability to "fork" an existing project, provides a good way to work on the Wine project when, for example, the project itself is in "code freeze" due to proximity to a release milestone.

You will find the WineHQ repository on a GitHub mirror.

To fork, simply register. It is free for open source projects as of Jul 14, 2010. Once registered, click on the "Fork" button in the upper right hand side of the Wine repository link above.

8.2. Once you have forked

You will find helpful information on forking a project at GitHub.

Once forking is complete, you will find an SSH url listed, that has Read+Write access, of the form:

git@github.com:username/wine.git

First, you must check out your new repository. To do so, type:

git clone git@github.com:username/wine.git local-folder-name

It is advantageous to add the WineHQ GIT repository as an upstream repository, rather than the GitHub mirror. Additionally, we will rebase with this repository to ensure that the HEAD of our repository is up to date with WineHQ. To do this, use the following commands:

git remote add upstream git://source.winehq.org/git/wine.git
git fetch upstream
git rebase upstream/master

to include the upstream (main) Wine repository as a "remote" in your fork.

Once you have made some local changes, committed them locally, and want to commit them to your GitHub fork, use the following command:

git push origin master

Finally, to update your local branch to match the WineHQ repository, use:

git pull

8.3. Generating a patchset

It is useful, when working with a forked repository, to be able to send only a few patches from the part of your repository that is closest to the upstream wine repository.

It is, in fact, highly recommended to only send a few patches at a time (2-3).

First, please follow the instructions for sending patches using imap. Next, you can use the following commands to send the first 2 patches in your repository that are not present in WineHQ upstream:

NUMBER_OF_PATCHES_TO_SEND=2
FIRST_PATCH=`git rev-list upstream/master..origin | wc -l`
LAST_PATCH=`expr $FIRST_PATCH - $NUMBER_OF_PATCHES_TO_SEND`
git format-patch --attach -n --stdout HEAD~$FIRST_PATCH..HEAD~$LAST_PATCH | git imap-send

Please note that the above syntax HEAD~nnn refers to the patch that is nnn patches behind the current HEAD of your local repository. Thus, the number FIRST_PATCH will be greater than the number LAST_PATCH.

Finally, if you need to resend a patchset, the following will allow you to automatically append a try number to your patches (2 in the example below):

TRY=2
NUMBER_OF_PATCHES_TO_SEND=2
FIRST_PATCH=`git rev-list upstream/master..origin | wc -l`
LAST_PATCH=`expr $FIRST_PATCH - $NUMBER_OF_PATCHES_TO_SEND`
git format-patch --attach -n --stdout HEAD~$FIRST_PATCH..HEAD~$LAST_PATCH | sed "s/\(Subject: .*\)/\1 (try $TRY)/" | git imap-send

8.4. Useful morsels

Output all your patches in the out directory:

git format-patch -k -o out upstream/master

Save all your patches as one big file (for your own easy reference/viewing):

git log upstream/master..origin -p > /path/to/file 2>&1

Count the number of patches in your repository but not in upstream Wine (useful for keeping track of any disappearing patches):

git rev-list upstream/master..origin | wc -l

Perform an interactive rebase of your commits using git rebase:

git rebase -i upstream/master

Finally, if you would like to force commits onto GitHub (e.g., edited patches), use:

git push -f origin master

Personally, I (MishaKoshelev) use the following each time I have some new patches that I would like to send to my GitHub repository. This ensures that all patches are forced, and trailing whitespace is removed:

git rebase --whitespace=fix upstream/master
git push -f origin master

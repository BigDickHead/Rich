brctl 用来管理以太网桥，在内核中建立，维护，检查网桥配置。一个网桥一般用来连接多个不同的网络，这样这些不同的网络就可以像一个网络那样进行通讯。
      网桥是一种在链路层实现中继，对帧进行转发的技术，根据MAC分区块，可隔离碰撞，将网络的多个网段在数据链路层连接起来的网络设备。网桥工作在数据链路层，将两个LAN连起来，根据MAC地址来转发帧，可以看作一个“底层的路由器”
      在网桥上每个以太网连接可以对应到一个物理接口，这些以太网借口组合成一个大的逻辑的接口，这个逻辑接口对应于桥接网络。

      brctl addbr <name>  创建一个名为name的桥接网络接口
      brctl delbr <name>  删除一个名为name的桥接网络接口，桥接网络接口必须先down掉后才能删除。
      brctl show          显示目前所有的桥接接口

      brctl addif <brname> <ifname>  把一个物理接口ifname加入桥接接口brname中，所有从ifname收到的帧都将被处理，就像网桥处理的一样。所有发往brname的帧，ifname就像输出接口一样。当物理以太网加入网桥后，据处于混杂模式了，所以不需要配置IP。

     brctl delif <brname> <ifname>  从brname中脱离一个ifname接口
     brctl show <brname>   显示一些网桥的信息

     STP 多个以太网桥可以工作在一起组成一个更大的网络，利用802.1d协议在两个网络之间寻找最短路径，STP的作用是防止以太网桥之间形成回路，如果确定只有一个网桥，则可以关闭STP。
brctl stp <bridge> <state>  控制网桥是否加入STP树中，<state>可以是'on'或者'yes'表示加入stp树中，这样当lan中有多个网桥时可以防止回环，'off'表示关闭stp。

     brctl setbridgeprio <bridge> <priority>
     设置网桥的优先级，<priority>的值为0-65535，值小的优先级高，优先级最高的是根网桥。

     brctl setfd <bridge> <time> 
     设置网桥的'bridge forward delay'转发延迟时间，时间以秒为单位

     brctl sethello <bridge> <time> 
     设置网桥的'bridge hello time'存活检测时间

     brctl setmaxage <bridge> <time>
     设置网桥的'maximum message age'时间

     brctl setpathcost <bridge> <port> <cost>
    设置网桥中某个端口的链路花费值

     brctl  setportprio  <bridge>  <port> <priority>
     设置网桥中某个端口的优先级


实例1：简单网桥
eth0 eth1 组合成一个网桥br0
brctl addbr br0   创建一个网桥br0实例
brctl addif br0 eth0   把eth0 加入网桥br0中
brctl addif br0 eth1   把eth1 加入网桥br0中
ifconfig eth0 0.0.0.0  物理网卡处于混杂模式，不用配置IP
ifconfig eth1 0.0.0.0
ifconfig br0 10.1.1.2  只需要给网桥配置一个IP即可

实例2：创建多网桥通讯
创建多网桥通过filtering/NATting进行通讯，在有四个网卡的机器上，把两个网卡划入一个lan中，IP是10.16.0.254，另外两个网卡划入一个lan中，IP是192.168.10.1。
brctl addbr br_10
brctl addif br_10 eth0
brctl addif br_10 eth1
ifconfig br_10 10.16.0.254

brctl addbr br_192
brctl addif br_192 eth2
brctl addif br_192 eth3
ifconfig br_192 192.168.10.1

现在就有了两个本地的网卡br_10 br_192，打开ipforwd，假如192.168.10.2是在192.*网段被允许访问访问10.*网段：
ipchains -P forward REJECT
ipchains -A forward -s 192.168.10.2/32 -d 10.0.0.0/8 -i br_10 -j ACCEPT 


BRCTL(8)                                                                                                          BRCTL(8)



NAME
       brctl - ethernet bridge administration

SYNOPSIS
       brctl [command]

DESCRIPTION
       brctl is used to set up, maintain, and inspect the ethernet bridge configuration in the linux kernel.

       An ethernet bridge is a device commonly used to connect different networks of ethernets together, so that these ether‐
       nets will appear as one ethernet to the participants.

       Each of the ethernets being connected corresponds to one physical interface in the bridge. These individual  ethernets
       are bundled into one bigger ('logical') ethernet, this bigger ethernet corresponds to the bridge network interface.



INSTANCES
       The  command  brctl addbr <name> creates a new instance of the ethernet bridge. The network interface corresponding to
       the bridge will be called <name>.

       The command brctl delbr <name> deletes the instance <name> of the ethernet bridge. The network interface corresponding
       to the bridge must be down before it can be deleted!

       The command brctl show shows all current instances of the ethernet bridge.



PORTS
       Each bridge has a number of ports attached to it. Network traffic coming in on any of these ports will be forwarded to
       the other ports transparently, so that the bridge is invisible to the rest of the network (i.e. it will not show up in
       traceroute(8) ).

       The  command  brctl addif <brname> <ifname> will make the interface <ifname> a port of the bridge <brname>. This means
       that all frames received on <ifname> will be processed as if destined for the bridge. Also,  when  sending  frames  on
       <brname>, <ifname> will be considered as a potential output interface.

       The command brctl delif <brname> <ifname> will detach the interface <ifname> from the bridge <brname>.

       The command brctl show <brname> will show some information on the bridge and its attached ports.



AGEING
       The  bridge  keeps  track of ethernet addresses seen on each port. When it needs to forward a frame, and it happens to
       know on which port the destination ethernet address (specified in the frame) is located, it can 'cheat' by  forwarding
       the frame to that port only, thus saving a lot of redundant copies and transmits.

       However, the ethernet address location data is not static data. Machines can move to other ports, network cards can be
       replaced (which changes the machine's ethernet address), etc.

       brctl showmacs <brname> shows a list of learned MAC addresses for this bridge.

       brctl setageing <brname> <time> sets the ethernet (MAC) address ageing time, in seconds. After <time> seconds  of  not
       having  seen a frame coming from a certain address, the bridge will time out (delete) that address from the Forwarding
       DataBase (fdb).

       brctl setgcint <brname> <time> sets the garbage collection interval for the bridge <brname> to  <time>  seconds.  This
       means that the bridge will check the forwarding database for timed out entries every <time> seconds.



SPANNING TREE PROTOCOL
       Multiple ethernet bridges can work together to create even larger networks of ethernets using the IEEE 802.1d spanning
       tree protocol. This protocol is used for finding the shortest path between two ethernets, and  for  eliminating  loops
       from the topology. As this protocol is a standard, linux bridges will interwork properly with other third party bridge
       products. Bridges communicate with each other by sending and receiving BPDUs (Bridge Protocol Data Units). These BPDUs
       can be recognised by an ethernet destination address of 01:80:c2:00:00:00.

       The  spanning tree protocol can also be turned off (for those situations where it just doesn't make sense, for example
       when this linux box is the only bridge on the LAN, or when you know that there are no loops in the topology.)

       brctl(8) can be used for configuring certain spanning tree protocol parameters. For an explanation  of  these  parame‐
       ters,  see  the  IEEE 802.1d specification (or send me an email). The default values should be just fine. If you don't
       know what these parameters mean, you probably won't feel the desire to tweak them.

       brctl stp <bridge> <state> controls this bridge instance's participation in the spanning tree protocol. If <state>  is
       "on"  or  "yes" the STP will be turned on, otherwise it will be turned off.  When turned off, the bridge will not send
       or receive BPDUs, and will thus not participate in the spanning tree protocol. If your bridge isn't the only bridge on
       the LAN, or if there are loops in the LAN's topology, DO NOT turn this option off. If you turn this option off, please
       know what you are doing.


       brctl setbridgeprio <bridge> <priority> sets the bridge's priority to <priority>. The priority value  is  an  unsigned
       16-bit  quantity  (a number between 0 and 65535), and has no dimension. Lower priority values are 'better'. The bridge
       with the lowest priority will be elected 'root bridge'.

       brctl setfd <bridge> <time> sets the bridge's 'bridge forward delay' to <time> seconds.

       brctl sethello <bridge> <time> sets the bridge's 'bridge hello time' to <time> seconds.

       brctl setmaxage <bridge> <time> sets the bridge's 'maximum message age' to <time> seconds.

       brctl setpathcost <bridge> <port> <cost> sets the port cost of the port <port> to <cost>. This is a dimensionless met‐
       ric.

       brctl  setportprio  <bridge> <port> <priority> sets the port <port>'s priority to <priority>. The priority value is an
       unsigned 8-bit quantity (a number between 0 and 255), and has no dimension. This metric is used in the designated port
       and root port selection algorithms.



NOTES
       brctl(8) replaces the older brcfg tool.


SEE ALSO
       ipchains(8), iptables(8)


AUTHOR
       Lennert Buytenhek <buytenh@gnu.org>



                                                   November 7, 2001                                              BRCTL(8)
 vim:tw=78:ts=8:ft=man:norl:                                               
